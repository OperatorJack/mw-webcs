{"version":3,"sources":["components/Nav.tsx","morrowind/structures/MorrowindSubRecordPropertyDataTypes.ts","utilities/SimpleDataView.tsx","morrowind/MorrowindDataView.tsx","morrowind/structures/MorrowindRecord.ts","morrowind/structures/MorrowindSubRecord.ts","morrowind/structures/MorrowindDataType.ts","morrowind/structures/MorrowindSubRecordProperty.ts","morrowind/MorrowindSubRecordDefinitions.tsx","morrowind/MorrowindPluginParser.tsx","components/PluginUploader.tsx","components/Body.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Nav","AppBar","position","Toolbar","variant","Typography","color","MorrowindSubRecordPropertyDataTypes","SimpleDataView","buffer","dataview","getBuffer","setBuffer","DataView","getByteLength","byteLength","getString","offset","length","end","text","val","getUint8","String","fromCharCode","getUint32","littleEndian","getUint64","getBigUint64","this","MorrowindDataView","getNumber","getBigInt","MorrowindRecord","name","size","unknownHeader","flags","SubRecords","Name","Size","UnkownHeader","Flags","MorrowindSubRecord","data","Data","MorrowindDataType","MorrowindSubRecordProperty","bytes","type","description","Bytes","Type","Text","Description","MorrowindSubRecordDefinitions","TES3","HEDR","Number","MAST","DATA","MorrowindPluginParser","integerSize","bigIntegerSize","groupName","propertyName","properties","definitions","forEach","defintion","property","Value","BigInt","push","parseSubRecordProperties","SubRecord","endOfFile","records","parseSubRecordData","record","obj","JSON","stringify","key","value","toString","PluginUploader","props","fileObjects","filesLimit","acceptedFiles","showPreviewsInDropzone","onAdd","onUpload","dropzoneText","maxFileSize","Body","editor","useState","result","setResult","handleBuffer","e","target","parse","id","placeholder","locale","theme","width","height","files","file","reader","FileReader","onload","readAsArrayBuffer","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eaf977f0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\nexport function Nav() {\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar variant=\"dense\">\r\n        <Typography variant=\"h6\" color=\"inherit\">\r\n          Morrowind WebCS\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","export enum MorrowindSubRecordPropertyDataTypes {\r\n  String = 1,\r\n  Number = 2,\r\n  BigInt = 3,\r\n}\r\n","export class SimpleDataView {\r\n  dataview: DataView;\r\n\r\n  constructor(buffer: ArrayBuffer) {\r\n    this.dataview = new DataView(buffer);\r\n  }\r\n\r\n  getBuffer = () => {\r\n    return this.dataview.buffer;\r\n  };\r\n\r\n  setBuffer = (buffer: ArrayBuffer) => {\r\n    this.dataview = new DataView(buffer);\r\n  };\r\n\r\n  getByteLength = () => {\r\n    return this.dataview.buffer.byteLength;\r\n  };\r\n\r\n  getString = (offset: number, length: number) => {\r\n    var end =\r\n      typeof length == \"number\" ? offset + length : this.dataview.byteLength;\r\n    var text = \"\";\r\n    var val = -1;\r\n\r\n    while (offset < this.dataview.byteLength && offset < end) {\r\n      val = this.dataview.getUint8(offset++);\r\n      if (val == 0) break;\r\n      text += String.fromCharCode(val);\r\n    }\r\n\r\n    return text;\r\n  };\r\n\r\n  getUint32 = (offset: number, littleEndian: boolean = true) => {\r\n    return this.dataview.getUint32(offset, littleEndian);\r\n  };\r\n\r\n  getUint64 = (offset: number, littleEndian: boolean = true) => {\r\n    return this.dataview.getBigUint64(offset, littleEndian);\r\n  };\r\n}\r\n","import { SimpleDataView } from \"../utilities/SimpleDataView\";\r\n\r\nexport class MorrowindDataView {\r\n  dataview: SimpleDataView;\r\n\r\n  constructor(buffer: ArrayBuffer) {\r\n    this.dataview = new SimpleDataView(buffer);\r\n  }\r\n\r\n  getBuffer = () => {\r\n    return this.dataview.getBuffer();\r\n  };\r\n\r\n  setBuffer = (buffer: ArrayBuffer) => {\r\n    this.dataview = new SimpleDataView(buffer);\r\n  };\r\n\r\n  getByteLength = () => {\r\n    return this.dataview.getByteLength();\r\n  };\r\n\r\n  getString = (offset: number, length: number) => {\r\n    return this.dataview.getString(offset, length);\r\n  };\r\n\r\n  getNumber = (offset: number) => {\r\n    return this.dataview.getUint32(offset);\r\n  };\r\n\r\n  getBigInt = (offset: number) => {\r\n    return this.dataview.getUint64(offset);\r\n  };\r\n}\r\n","import MorrowindSubRecord from \"./MorrowindSubrecord\";\r\n\r\nexport default class MorrowindRecord {\r\n  Name: string;\r\n  Size: number;\r\n  UnkownHeader: number;\r\n  Flags: number;\r\n  SubRecords: MorrowindSubRecord[];\r\n\r\n  constructor(\r\n    name: string,\r\n    size: number,\r\n    unknownHeader: number,\r\n    flags: number,\r\n    SubRecords: any\r\n  ) {\r\n    this.Name = name;\r\n    this.Size = size;\r\n    this.UnkownHeader = unknownHeader;\r\n    this.Flags = flags;\r\n    this.SubRecords = SubRecords;\r\n  }\r\n}\r\n","export default class MorrowindSubRecord {\r\n  Name: string;\r\n  Size: number;\r\n  Data: any;\r\n\r\n  constructor(name: string, size: number, data: any) {\r\n    this.Name = name;\r\n    this.Size = size;\r\n    this.Data = data;\r\n  }\r\n}\r\n","export const MorrowindDataType = {\r\n  String: {\r\n    Size: null,\r\n  },\r\n  Number: {\r\n    Size: 4,\r\n  },\r\n  BigInt: {\r\n    Size: 8,\r\n  },\r\n} as const;\r\n","import { MorrowindSubRecordPropertyDataTypes } from \"./MorrowindSubRecordPropertyDataTypes\";\r\n\r\nexport default class MorrowindSubRecordProperty {\r\n  Bytes: number | null;\r\n  Type: MorrowindSubRecordPropertyDataTypes;\r\n  Text: string;\r\n  Description: string;\r\n\r\n  constructor(\r\n    bytes: number | null,\r\n    type: MorrowindSubRecordPropertyDataTypes,\r\n    text: string,\r\n    description: string\r\n  ) {\r\n    this.Bytes = bytes;\r\n    this.Type = type;\r\n    this.Text = text;\r\n    this.Description = description;\r\n  }\r\n}\r\n","import { MorrowindDataType } from \"./structures/MorrowindDataType\";\r\nimport MorrowindSubRecordProperty from \"./structures/MorrowindSubRecordProperty\";\r\nimport { MorrowindSubRecordPropertyDataTypes } from \"./structures/MorrowindSubRecordPropertyDataTypes\";\r\n\r\nexport const MorrowindSubRecordDefinitions = {\r\n  TES3: {\r\n    HEDR: [\r\n      new MorrowindSubRecordProperty(\r\n        MorrowindDataType.Number.Size,\r\n        MorrowindSubRecordPropertyDataTypes.Number,\r\n        \"Version\",\r\n        \"Float. Version. 1.2.\"\r\n      ),\r\n      new MorrowindSubRecordProperty(\r\n        MorrowindDataType.Number.Size,\r\n        MorrowindSubRecordPropertyDataTypes.Number,\r\n        \"Unknown\",\r\n        \"Long. Unknown.\"\r\n      ),\r\n      new MorrowindSubRecordProperty(\r\n        32,\r\n        MorrowindSubRecordPropertyDataTypes.String,\r\n        \"Author\",\r\n        \"String. Author.\"\r\n      ),\r\n      new MorrowindSubRecordProperty(\r\n        256,\r\n        MorrowindSubRecordPropertyDataTypes.String,\r\n        \"Plugin Description\",\r\n        \"String. Plugin Description.\"\r\n      ),\r\n      new MorrowindSubRecordProperty(\r\n        MorrowindDataType.Number.Size,\r\n        MorrowindSubRecordPropertyDataTypes.Number,\r\n        \"Records\",\r\n        \"Long. Number of records.\"\r\n      ),\r\n    ],\r\n    MAST: [\r\n      new MorrowindSubRecordProperty(\r\n        null,\r\n        MorrowindSubRecordPropertyDataTypes.String,\r\n        \"Master File\",\r\n        \"Variable length string. Master File.\"\r\n      ),\r\n    ],\r\n    DATA: [\r\n      new MorrowindSubRecordProperty(\r\n        MorrowindDataType.Number.Size,\r\n        MorrowindSubRecordPropertyDataTypes.Number,\r\n        \"Master Size\",\r\n        \"Long. Master Size.\"\r\n      ),\r\n      new MorrowindSubRecordProperty(\r\n        MorrowindDataType.Number.Size,\r\n        MorrowindSubRecordPropertyDataTypes.Number,\r\n        \"Master Size Split\",\r\n        \"Long. Master Size, split due to JSON.\"\r\n      ),\r\n    ],\r\n  },\r\n} as const;\r\n","import { MorrowindDataView } from \"./MorrowindDataView\";\r\nimport MorrowindRecord from \"./structures/MorrowindRecord\";\r\nimport MorrowindSubRecord from \"./structures/MorrowindSubRecord\";\r\nimport { MorrowindSubRecordDefinitions } from \"./MorrowindSubRecordDefinitions\";\r\nimport MorrowindSubRecordProperty from \"./structures/MorrowindSubRecordProperty\";\r\nimport { MorrowindSubRecordPropertyDataTypes } from \"./structures/MorrowindSubRecordPropertyDataTypes\";\r\n\r\nexport class MorrowindPluginParser {\r\n  dataview: MorrowindDataView;\r\n\r\n  constructor(dataview: MorrowindDataView) {\r\n    this.dataview = dataview;\r\n  }\r\n\r\n  private integerSize: number = 4;\r\n  private bigIntegerSize: number = 8;\r\n\r\n  private parseSubRecordProperties(\r\n    groupName: string,\r\n    propertyName: string,\r\n    position: number,\r\n    offset: number\r\n  ): any {\r\n    let properties: any = [];\r\n\r\n    let defintionGroup: any = (MorrowindSubRecordDefinitions as any)[groupName];\r\n    if (defintionGroup == null) {\r\n      return \"Not Implemented\";\r\n    }\r\n    let definitions: any = (MorrowindSubRecordDefinitions as any)[groupName][\r\n      propertyName\r\n    ];\r\n\r\n    if (definitions == null) {\r\n      return \"Not Implemented\";\r\n    }\r\n\r\n    definitions.forEach((defintion: MorrowindSubRecordProperty) => {\r\n      let bytes: number | null = defintion.Bytes;\r\n      let text: string = defintion.Text;\r\n\r\n      var property;\r\n      if (defintion.Type === MorrowindSubRecordPropertyDataTypes.Number) {\r\n        property = {\r\n          Name: text,\r\n          Value: this.dataview.getNumber(position),\r\n        };\r\n        position += this.integerSize;\r\n      } else if (\r\n        defintion.Type === MorrowindSubRecordPropertyDataTypes.BigInt\r\n      ) {\r\n        property = {\r\n          Name: text,\r\n          Value: this.dataview.getBigInt(position),\r\n        };\r\n        position += this.bigIntegerSize;\r\n      } else if (\r\n        defintion.Type === MorrowindSubRecordPropertyDataTypes.String\r\n      ) {\r\n        property = {\r\n          Name: text,\r\n          Value: this.dataview.getString(position, bytes ?? offset),\r\n        };\r\n        position += bytes ?? offset;\r\n      } else {\r\n        property = {};\r\n      }\r\n\r\n      properties.push(property);\r\n    });\r\n\r\n    return properties;\r\n  }\r\n\r\n  private parseSubRecordData(\r\n    groupName: string,\r\n    position: number,\r\n    offset: number\r\n  ): MorrowindSubRecord[] {\r\n    let SubRecords: MorrowindSubRecord[] = [];\r\n    while (position <= offset) {\r\n      let name: string = this.dataview.getString(position, 4);\r\n      position += 4;\r\n      let size: number = this.dataview.getNumber(position);\r\n      position += this.integerSize;\r\n      let data: any = this.parseSubRecordProperties(\r\n        groupName,\r\n        name,\r\n        position,\r\n        size\r\n      );\r\n      position += size;\r\n\r\n      var SubRecord = new MorrowindSubRecord(name, size, data);\r\n\r\n      SubRecords.push(SubRecord);\r\n    }\r\n\r\n    return SubRecords;\r\n  }\r\n\r\n  parse(): MorrowindRecord[] {\r\n    var endOfFile = false;\r\n    var position = 0;\r\n    var records = [];\r\n    while (endOfFile === false) {\r\n      let name: string = this.dataview.getString(position, 4);\r\n      position += 4;\r\n      let size: number = this.dataview.getNumber(position);\r\n      position += this.integerSize;\r\n      let unknownHeader: number = this.dataview.getNumber(position);\r\n      position += this.integerSize;\r\n      let flags: number = this.dataview.getNumber(position);\r\n      position += this.integerSize;\r\n      let SubRecords: MorrowindSubRecord[] = this.parseSubRecordData(\r\n        name,\r\n        position,\r\n        size\r\n      );\r\n      position += size;\r\n\r\n      var record = new MorrowindRecord(\r\n        name,\r\n        size,\r\n        unknownHeader,\r\n        flags,\r\n        SubRecords\r\n      );\r\n\r\n      records.push(record);\r\n\r\n      if (position >= this.dataview.getByteLength()) {\r\n        endOfFile = true;\r\n      }\r\n    }\r\n\r\n    return records;\r\n  }\r\n\r\n  toJSON(obj: any): string {\r\n    return JSON.stringify(\r\n      obj,\r\n      (key, value) => (typeof value === \"bigint\" ? value.toString() : value) // return everything else unchanged\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { DropzoneAreaBase, FileObject } from \"material-ui-dropzone\";\r\n\r\nexport function PluginUploader(props: {\r\n  onUpload: ((files: FileObject[]) => void) | undefined;\r\n}) {\r\n  return (\r\n    <DropzoneAreaBase\r\n      fileObjects={[]}\r\n      filesLimit={1}\r\n      acceptedFiles={[\".esp\", \".esm\"]}\r\n      showPreviewsInDropzone={false}\r\n      onAdd={props.onUpload}\r\n      dropzoneText=\"Drag and drop a plugin here or click to begin\"\r\n      maxFileSize={200000000}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { MorrowindDataView } from \"../morrowind/MorrowindDataView\";\r\nimport { MorrowindPluginParser } from \"../morrowind/MorrowindPluginParser\";\r\nimport MorrowindRecord from \"../morrowind/structures/MorrowindRecord\";\r\n\r\nimport JSONInput from \"react-json-editor-ajrm\";\r\nimport locale from \"react-json-editor-ajrm/locale/en\";\r\nimport { useState } from \"react\";\r\nimport { PluginUploader } from \"./PluginUploader\";\r\nimport { FileObject } from \"material-ui-dropzone\";\r\n\r\nexport function Body() {\r\n  const [result, setResult] = useState<MorrowindRecord[] | null>(null);\r\n\r\n  const handleBuffer = function (e: any) {\r\n    let buffer: ArrayBuffer = e.target.result;\r\n    let dataview: MorrowindDataView = new MorrowindDataView(buffer);\r\n    let parser: MorrowindPluginParser = new MorrowindPluginParser(dataview);\r\n    let records: MorrowindRecord[] = parser.parse();\r\n    setResult(records);\r\n  };\r\n\r\n  const handleFileUpload = function (files: FileObject[]) {\r\n    const file = files[0].file;\r\n\r\n    if (file == null) {\r\n      return;\r\n    }\r\n\r\n    var reader = new FileReader();\r\n    reader.onload = handleBuffer;\r\n    reader.readAsArrayBuffer(file);\r\n  };\r\n\r\n  let editor;\r\n  if (result !== null) {\r\n    editor = (\r\n      <>\r\n        <JSONInput\r\n          id=\"a_unique_id\"\r\n          placeholder={result}\r\n          locale={locale}\r\n          theme=\"light_mitsuketa_tribute\"\r\n          width=\"100%\"\r\n          height=\"550px\"\r\n        />\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <hr />\r\n      <PluginUploader onUpload={handleFileUpload} />\r\n      <hr />\r\n      <div>{editor}</div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { Nav } from \"./components/Nav\";\nimport { Body } from \"./components/Body\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Body />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}