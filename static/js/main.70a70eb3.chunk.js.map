{"version":3,"sources":["utilities/SimpleDataView.tsx","morrowind/MorrowindDataView.tsx","morrowind/structures/MorrowindRecord.tsx","morrowind/structures/MorrowindSubRecord.tsx","morrowind/MorrowindSubRecordDefinitions.tsx","morrowind/MorrowindPluginParser.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SimpleDataView","buffer","dataview","getBuffer","setBuffer","DataView","getByteLength","byteLength","getString","offset","length","end","text","val","getUint8","String","fromCharCode","getUint32","littleEndian","getUint64","getBigUint64","this","MorrowindDataView","getNumber","getBigInt","MorrowindRecord","name","size","unknownHeader","flags","SubRecords","Name","Size","UnkownHeader","Flags","MorrowindSubRecord","data","Data","getProperty","bytes","type","description","MorrowindSubRecordDefinitions","TES3","HEDR","MAST","DATA","MorrowindPluginParser","integerSize","bigIntegerSize","groupName","propertyName","position","properties","console","log","definitions","forEach","defintion","property","Value","push","parseSubRecordProperties","SubRecord","endOfFile","records","parseSubRecordData","record","obj","JSON","stringify","key","value","toString","App","editor","useState","result","setResult","handleBuffer","e","target","parser","parse","toJSON","id","placeholder","locale","theme","width","height","className","onChange","files","file","reader","FileReader","onload","readAsArrayBuffer","handleFileUpload","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.70a70eb3.chunk.js","sourcesContent":["export class SimpleDataView {\r\n  dataview: DataView;\r\n\r\n  constructor(buffer: ArrayBuffer) {\r\n    this.dataview = new DataView(buffer);\r\n  }\r\n\r\n  getBuffer = () => {\r\n    return this.dataview.buffer;\r\n  };\r\n\r\n  setBuffer = (buffer: ArrayBuffer) => {\r\n    this.dataview = new DataView(buffer);\r\n  };\r\n\r\n  getByteLength = () => {\r\n    return this.dataview.buffer.byteLength;\r\n  };\r\n\r\n  getString = (offset: number, length: number) => {\r\n    var end =\r\n      typeof length == \"number\" ? offset + length : this.dataview.byteLength;\r\n    var text = \"\";\r\n    var val = -1;\r\n\r\n    while (offset < this.dataview.byteLength && offset < end) {\r\n      val = this.dataview.getUint8(offset++);\r\n      if (val == 0) break;\r\n      text += String.fromCharCode(val);\r\n    }\r\n\r\n    return text;\r\n  };\r\n\r\n  getUint32 = (offset: number, littleEndian: boolean = true) => {\r\n    return this.dataview.getUint32(offset, littleEndian);\r\n  };\r\n\r\n  getUint64 = (offset: number, littleEndian: boolean = true) => {\r\n    return this.dataview.getBigUint64(offset, littleEndian);\r\n  };\r\n}\r\n","import { SimpleDataView } from \"../utilities/SimpleDataView\";\r\n\r\nexport class MorrowindDataView {\r\n  dataview: SimpleDataView;\r\n\r\n  constructor(buffer: ArrayBuffer) {\r\n    this.dataview = new SimpleDataView(buffer);\r\n  }\r\n\r\n  getBuffer = () => {\r\n    return this.dataview.getBuffer();\r\n  };\r\n\r\n  setBuffer = (buffer: ArrayBuffer) => {\r\n    this.dataview = new SimpleDataView(buffer);\r\n  };\r\n\r\n  getByteLength = () => {\r\n    return this.dataview.getByteLength();\r\n  };\r\n\r\n  getString = (offset: number, length: number) => {\r\n    return this.dataview.getString(offset, length);\r\n  };\r\n\r\n  getNumber = (offset: number) => {\r\n    return this.dataview.getUint32(offset);\r\n  };\r\n\r\n  getBigInt = (offset: number) => {\r\n    return this.dataview.getUint64(offset);\r\n  };\r\n}\r\n","import MorrowindSubRecord from \"./MorrowindSubrecord\";\r\n\r\nexport default class MorrowindRecord {\r\n  Name: string;\r\n  Size: number;\r\n  UnkownHeader: number;\r\n  Flags: number;\r\n  SubRecords: MorrowindSubRecord[];\r\n\r\n  constructor(\r\n    name: string,\r\n    size: number,\r\n    unknownHeader: number,\r\n    flags: number,\r\n    SubRecords: any\r\n  ) {\r\n    this.Name = name;\r\n    this.Size = size;\r\n    this.UnkownHeader = unknownHeader;\r\n    this.Flags = flags;\r\n    this.SubRecords = SubRecords;\r\n  }\r\n}\r\n","export default class MorrowindSubRecord {\r\n  Name: string;\r\n  Size: number;\r\n  Data: any;\r\n\r\n  constructor(name: string, size: number, data: any) {\r\n    this.Name = name;\r\n    this.Size = size;\r\n    this.Data = data;\r\n  }\r\n}\r\n","function getProperty(\r\n  bytes: number | null,\r\n  type: string,\r\n  text: string,\r\n  description: string\r\n) {\r\n  return {\r\n    bytes: bytes,\r\n    type: type,\r\n    text: text,\r\n    description: description,\r\n  };\r\n}\r\n\r\nexport const MorrowindSubRecordDefinitions = {\r\n  TES3: {\r\n    HEDR: [\r\n      getProperty(4, \"n\", \"Version\", \"Float. Version. 1.2.\"),\r\n      getProperty(4, \"n\", \"Unknown\", \"Long. Unknown.\"),\r\n      getProperty(32, \"s\", \"Company Name\", \"String. Company Name.\"),\r\n      getProperty(256, \"s\", \"ESM Description\", \"String. ESM File Description.\"),\r\n      getProperty(4, \"n\", \"Records\", \"Long. Number of records.\"),\r\n    ],\r\n    MAST: [\r\n      getProperty(\r\n        null,\r\n        \"s\",\r\n        \"Master File\",\r\n        \"Variable length string. Master File.\"\r\n      ),\r\n    ],\r\n    DATA: [\r\n      getProperty(4, \"n\", \"Master Size\", \"Long. Master Size.\"),\r\n      getProperty(\r\n        4,\r\n        \"n\",\r\n        \"Master Size\",\r\n        \"Long. Master Size, split due to JSON.\"\r\n      ),\r\n    ],\r\n  },\r\n} as const;\r\n","import { MorrowindDataView } from \"./MorrowindDataView\";\r\nimport MorrowindRecord from \"./structures/MorrowindRecord\";\r\nimport MorrowindSubRecord from \"./structures/MorrowindSubRecord\";\r\nimport { MorrowindSubRecordDefinitions } from \"./MorrowindSubRecordDefinitions\";\r\n\r\nexport class MorrowindPluginParser {\r\n  dataview: MorrowindDataView;\r\n\r\n  constructor(dataview: MorrowindDataView) {\r\n    this.dataview = dataview;\r\n  }\r\n\r\n  private integerSize: number = 4;\r\n  private bigIntegerSize: number = 8;\r\n\r\n  private parseSubRecordProperties(\r\n    groupName: string,\r\n    propertyName: string,\r\n    position: number,\r\n    offset: number\r\n  ): any {\r\n    let properties: any = [];\r\n\r\n    let defintionGroup: any = (MorrowindSubRecordDefinitions as any)[groupName];\r\n    if (defintionGroup == null) {\r\n      console.log(groupName + \" not found.\");\r\n      return \"Not Implemented\";\r\n    }\r\n    let definitions: any = (MorrowindSubRecordDefinitions as any)[groupName][\r\n      propertyName\r\n    ];\r\n\r\n    if (definitions == null) {\r\n      return \"Not Implemented\";\r\n    }\r\n\r\n    definitions.forEach((defintion: any) => {\r\n      let bytes: number = defintion.bytes;\r\n      let text: string = defintion.text;\r\n\r\n      var property;\r\n      if (defintion.type == \"n\") {\r\n        property = {\r\n          Name: text,\r\n          Value: this.dataview.getNumber(position),\r\n        };\r\n        position += this.integerSize;\r\n      } else if (defintion.type == \"n64\") {\r\n        property = {\r\n          Name: text,\r\n          Value: this.dataview.getBigInt(position),\r\n        };\r\n        position += this.bigIntegerSize;\r\n      } else if (defintion.type == \"s\") {\r\n        property = {\r\n          Name: text,\r\n          Value: this.dataview.getString(position, bytes ?? offset),\r\n        };\r\n        position += bytes;\r\n      } else {\r\n        property = {};\r\n      }\r\n\r\n      properties.push(property);\r\n    });\r\n\r\n    return properties;\r\n  }\r\n\r\n  private parseSubRecordData(\r\n    groupName: string,\r\n    position: number,\r\n    offset: number\r\n  ): MorrowindSubRecord[] {\r\n    let SubRecords: MorrowindSubRecord[] = [];\r\n    while (position <= offset) {\r\n      let name: string = this.dataview.getString(position, 4);\r\n      position += 4;\r\n      let size: number = this.dataview.getNumber(position);\r\n      position += this.integerSize;\r\n      let data: any = this.parseSubRecordProperties(\r\n        groupName,\r\n        name,\r\n        position,\r\n        size\r\n      );\r\n      position += size;\r\n\r\n      var SubRecord = new MorrowindSubRecord(name, size, data);\r\n\r\n      SubRecords.push(SubRecord);\r\n    }\r\n\r\n    return SubRecords;\r\n  }\r\n\r\n  parse(): MorrowindRecord[] {\r\n    var endOfFile = false;\r\n    var position = 0;\r\n    var records = [];\r\n    while (endOfFile === false) {\r\n      let name: string = this.dataview.getString(position, 4);\r\n      position += 4;\r\n      let size: number = this.dataview.getNumber(position);\r\n      position += this.integerSize;\r\n      let unknownHeader: number = this.dataview.getNumber(position);\r\n      position += this.integerSize;\r\n      let flags: number = this.dataview.getNumber(position);\r\n      position += this.integerSize;\r\n      let SubRecords: MorrowindSubRecord[] = this.parseSubRecordData(\r\n        name,\r\n        position,\r\n        size\r\n      );\r\n      position += size;\r\n\r\n      var record = new MorrowindRecord(\r\n        name,\r\n        size,\r\n        unknownHeader,\r\n        flags,\r\n        SubRecords\r\n      );\r\n\r\n      records.push(record);\r\n\r\n      if (position >= this.dataview.getByteLength()) {\r\n        endOfFile = true;\r\n      }\r\n    }\r\n\r\n    return records;\r\n  }\r\n\r\n  toJSON(obj: any): string {\r\n    return JSON.stringify(\r\n      obj,\r\n      (key, value) => (typeof value === \"bigint\" ? value.toString() : value) // return everything else unchanged\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\nimport { MorrowindDataView } from \"./morrowind/MorrowindDataView\";\nimport { MorrowindPluginParser } from \"./morrowind/MorrowindPluginParser\";\nimport MorrowindRecord from \"./morrowind/structures/MorrowindRecord\";\n\nimport JSONInput from \"react-json-editor-ajrm\";\nimport locale from \"react-json-editor-ajrm/locale/en\";\n\nconst App = () => {\n  const [result, setResult] = useState<MorrowindRecord[] | null>(null);\n\n  const handleBuffer = function (e: any) {\n    let buffer: ArrayBuffer = e.target.result;\n    let dataview: MorrowindDataView = new MorrowindDataView(buffer);\n    let parser: MorrowindPluginParser = new MorrowindPluginParser(dataview);\n    let records: MorrowindRecord[] = parser.parse();\n    let result: string = parser.toJSON(records);\n    console.log(result);\n    setResult(records);\n  };\n\n  const handleFileUpload = function (e: React.ChangeEvent<HTMLInputElement>) {\n    if (e?.target?.files == null) {\n      return;\n    }\n\n    const file = e.target.files[0];\n\n    if (file == null) {\n      return;\n    }\n\n    var reader = new FileReader();\n    reader.onload = handleBuffer;\n    reader.readAsArrayBuffer(file);\n  };\n\n  const handleChange = function () {};\n\n  let editor;\n  if (result !== null) {\n    console.log(result);\n    editor = (\n      <JSONInput\n        id=\"a_unique_id\"\n        placeholder={result}\n        locale={locale}\n        theme=\"light_mitsuketa_tribute\"\n        width=\"100vw\"\n        height=\"85vh\"\n      />\n    );\n  }\n  return (\n    <div className=\"App\">\n      <h5>MorrowBrowser</h5>\n      <p>Upload a file to trigger parsing. View console for formatted JSON.</p>\n      <form>\n        <input type=\"file\" onChange={(e) => handleFileUpload(e)} />\n      </form>\n      <hr />\n      {editor}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}